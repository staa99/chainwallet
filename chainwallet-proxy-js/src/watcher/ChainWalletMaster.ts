/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ProxiableWalletManagerUpgradeable {
  export type ProxyTransactionInputStruct = {
    agentAddress: string;
    toAddress: string;
    value: BigNumberish;
    nonce: BigNumberish;
    gasLimit: BigNumberish;
    gasPrice: BigNumberish;
    data: BytesLike;
    signature: BytesLike;
  };

  export type ProxyTransactionInputStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    agentAddress: string;
    toAddress: string;
    value: BigNumber;
    nonce: BigNumber;
    gasLimit: BigNumber;
    gasPrice: BigNumber;
    data: string;
    signature: string;
  };
}

export interface ChainWalletMasterInterface extends utils.Interface {
  contractName: "ChainWalletMaster";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "STAKING_MANAGER_ROLE()": FunctionFragment;
    "SUPPORTED_AGENT_VERSION()": FunctionFragment;
    "TREASURY_MANAGER_ROLE()": FunctionFragment;
    "UPGRADER_ROLE()": FunctionFragment;
    "blockList(address)": FunctionFragment;
    "cancelDelete()": FunctionFragment;
    "computeInteractHash((address,address,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "computeSendEthersHash((address,address,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "confirmDelete()": FunctionFragment;
    "createAgent()": FunctionFragment;
    "createWallet()": FunctionFragment;
    "deleteWallet()": FunctionFragment;
    "getAgentNonce(address)": FunctionFragment;
    "getAgents()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(bytes4,address,uint256,uint256,uint16)": FunctionFragment;
    "initiateProxyTransaction(bytes)": FunctionFragment;
    "instanceId()": FunctionFragment;
    "interact(address,address,uint256,bytes)": FunctionFragment;
    "interactAsProxy((address,address,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "isDeleting()": FunctionFragment;
    "maxStakeAmount()": FunctionFragment;
    "minPoolSharePercentage()": FunctionFragment;
    "minStakeAmount()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sendEther(address,address,uint256)": FunctionFragment;
    "sendEtherAsProxy((address,address,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "setMaxStakeAmount(uint256)": FunctionFragment;
    "setMinStakeAmount(uint256)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "shareWallet(address)": FunctionFragment;
    "stakeEthers()": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalStakes()": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawStakes()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPORTED_AGENT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "blockList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelDelete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeInteractHash",
    values: [ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "computeSendEthersHash",
    values: [ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDelete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAgent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentNonce",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAgents", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateProxyTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "instanceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interact",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interactAsProxy",
    values: [ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeleting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPoolSharePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendEther",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendEtherAsProxy",
    values: [ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shareWallet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeEthers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStakes",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPORTED_AGENT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelDelete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeInteractHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeSendEthersHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDelete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAgents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateProxyTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instanceId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interactAsProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDeleting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPoolSharePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendEther", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendEtherAsProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeEthers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStakes",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AgentDeployed(bytes32,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "MaxStakeAmountChanged(uint256)": EventFragment;
    "MinStakeAmountChanged(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StakesAdded(address,uint256)": EventFragment;
    "StakesWithdrawn(address)": EventFragment;
    "TransactionCompleted(bytes32)": EventFragment;
    "TransactionCreated(bytes)": EventFragment;
    "TreasuryAddressChanged(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WalletCreated(address,bytes32)": EventFragment;
    "WalletDeleted(address)": EventFragment;
    "WalletShared(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxStakeAmountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinStakeAmountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletShared"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AgentDeployedEvent = TypedEvent<
  [string, string],
  { walletId: string; agent: string }
>;

export type AgentDeployedEventFilter = TypedEventFilter<AgentDeployedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type MaxStakeAmountChangedEvent = TypedEvent<
  [BigNumber],
  { newAmount: BigNumber }
>;

export type MaxStakeAmountChangedEventFilter =
  TypedEventFilter<MaxStakeAmountChangedEvent>;

export type MinStakeAmountChangedEvent = TypedEvent<
  [BigNumber],
  { newAmount: BigNumber }
>;

export type MinStakeAmountChangedEventFilter =
  TypedEventFilter<MinStakeAmountChangedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type StakesAddedEvent = TypedEvent<
  [string, BigNumber],
  { staker: string; totalStakes: BigNumber }
>;

export type StakesAddedEventFilter = TypedEventFilter<StakesAddedEvent>;

export type StakesWithdrawnEvent = TypedEvent<[string], { staker: string }>;

export type StakesWithdrawnEventFilter = TypedEventFilter<StakesWithdrawnEvent>;

export type TransactionCompletedEvent = TypedEvent<
  [string],
  { transactionHash: string }
>;

export type TransactionCompletedEventFilter =
  TypedEventFilter<TransactionCompletedEvent>;

export type TransactionCreatedEvent = TypedEvent<[string], { locator: string }>;

export type TransactionCreatedEventFilter =
  TypedEventFilter<TransactionCreatedEvent>;

export type TreasuryAddressChangedEvent = TypedEvent<
  [string],
  { addr: string }
>;

export type TreasuryAddressChangedEventFilter =
  TypedEventFilter<TreasuryAddressChangedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export type WalletCreatedEvent = TypedEvent<
  [string, string],
  { owner: string; walletId: string }
>;

export type WalletCreatedEventFilter = TypedEventFilter<WalletCreatedEvent>;

export type WalletDeletedEvent = TypedEvent<[string], { owner: string }>;

export type WalletDeletedEventFilter = TypedEventFilter<WalletDeletedEvent>;

export type WalletSharedEvent = TypedEvent<
  [string, string, string],
  { sharer: string; recipient: string; walletId: string }
>;

export type WalletSharedEventFilter = TypedEventFilter<WalletSharedEvent>;

export interface ChainWalletMaster extends BaseContract {
  contractName: "ChainWalletMaster";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainWalletMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    STAKING_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUPPORTED_AGENT_VERSION(overrides?: CallOverrides): Promise<[string]>;

    TREASURY_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    blockList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    cancelDelete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeInteractHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeSendEthersHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    confirmDelete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAgent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createWallet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAgentNonce(
      agentAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAgents(overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _instanceId: BytesLike,
      treasuryAddress: string,
      minStakes: BigNumberish,
      maxStakes: BigNumberish,
      minPoolShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateProxyTransaction(
      locator: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instanceId(overrides?: CallOverrides): Promise<[string]>;

    interact(
      agentAddress: string,
      contractAddress: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interactAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDeleting(overrides?: CallOverrides): Promise<[boolean]>;

    maxStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPoolSharePercentage(overrides?: CallOverrides): Promise<[number]>;

    minStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendEther(
      agentAddress: string,
      recipientAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendEtherAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxStakeAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinStakeAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareWallet(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeEthers(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalStakes(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStakes(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  STAKING_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  SUPPORTED_AGENT_VERSION(overrides?: CallOverrides): Promise<string>;

  TREASURY_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

  blockList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cancelDelete(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeInteractHash(
    input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  computeSendEthersHash(
    input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  confirmDelete(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAgent(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createWallet(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteWallet(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAgentNonce(
    agentAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAgents(overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _instanceId: BytesLike,
    treasuryAddress: string,
    minStakes: BigNumberish,
    maxStakes: BigNumberish,
    minPoolShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateProxyTransaction(
    locator: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instanceId(overrides?: CallOverrides): Promise<string>;

  interact(
    agentAddress: string,
    contractAddress: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interactAsProxy(
    input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDeleting(overrides?: CallOverrides): Promise<boolean>;

  maxStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minPoolSharePercentage(overrides?: CallOverrides): Promise<number>;

  minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendEther(
    agentAddress: string,
    recipientAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendEtherAsProxy(
    input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxStakeAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinStakeAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareWallet(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeEthers(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStakes(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    STAKING_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    SUPPORTED_AGENT_VERSION(overrides?: CallOverrides): Promise<string>;

    TREASURY_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<string>;

    blockList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    cancelDelete(overrides?: CallOverrides): Promise<void>;

    computeInteractHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    computeSendEthersHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    confirmDelete(overrides?: CallOverrides): Promise<void>;

    createAgent(overrides?: CallOverrides): Promise<void>;

    createWallet(overrides?: CallOverrides): Promise<void>;

    deleteWallet(overrides?: CallOverrides): Promise<void>;

    getAgentNonce(
      agentAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgents(overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _instanceId: BytesLike,
      treasuryAddress: string,
      minStakes: BigNumberish,
      maxStakes: BigNumberish,
      minPoolShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateProxyTransaction(
      locator: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    instanceId(overrides?: CallOverrides): Promise<string>;

    interact(
      agentAddress: string,
      contractAddress: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    interactAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isDeleting(overrides?: CallOverrides): Promise<boolean>;

    maxStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minPoolSharePercentage(overrides?: CallOverrides): Promise<number>;

    minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendEther(
      agentAddress: string,
      recipientAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendEtherAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStakeAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinStakeAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(addr: string, overrides?: CallOverrides): Promise<void>;

    shareWallet(recipient: string, overrides?: CallOverrides): Promise<void>;

    stakeEthers(overrides?: CallOverrides): Promise<void>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStakes(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AgentDeployed(bytes32,address)"(
      walletId?: BytesLike | null,
      agent?: null
    ): AgentDeployedEventFilter;
    AgentDeployed(
      walletId?: BytesLike | null,
      agent?: null
    ): AgentDeployedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "MaxStakeAmountChanged(uint256)"(
      newAmount?: null
    ): MaxStakeAmountChangedEventFilter;
    MaxStakeAmountChanged(newAmount?: null): MaxStakeAmountChangedEventFilter;

    "MinStakeAmountChanged(uint256)"(
      newAmount?: null
    ): MinStakeAmountChangedEventFilter;
    MinStakeAmountChanged(newAmount?: null): MinStakeAmountChangedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "StakesAdded(address,uint256)"(
      staker?: string | null,
      totalStakes?: null
    ): StakesAddedEventFilter;
    StakesAdded(
      staker?: string | null,
      totalStakes?: null
    ): StakesAddedEventFilter;

    "StakesWithdrawn(address)"(staker?: null): StakesWithdrawnEventFilter;
    StakesWithdrawn(staker?: null): StakesWithdrawnEventFilter;

    "TransactionCompleted(bytes32)"(
      transactionHash?: BytesLike | null
    ): TransactionCompletedEventFilter;
    TransactionCompleted(
      transactionHash?: BytesLike | null
    ): TransactionCompletedEventFilter;

    "TransactionCreated(bytes)"(locator?: null): TransactionCreatedEventFilter;
    TransactionCreated(locator?: null): TransactionCreatedEventFilter;

    "TreasuryAddressChanged(address)"(
      addr?: null
    ): TreasuryAddressChangedEventFilter;
    TreasuryAddressChanged(addr?: null): TreasuryAddressChangedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "WalletCreated(address,bytes32)"(
      owner?: string | null,
      walletId?: null
    ): WalletCreatedEventFilter;
    WalletCreated(
      owner?: string | null,
      walletId?: null
    ): WalletCreatedEventFilter;

    "WalletDeleted(address)"(owner?: string | null): WalletDeletedEventFilter;
    WalletDeleted(owner?: string | null): WalletDeletedEventFilter;

    "WalletShared(address,address,bytes32)"(
      sharer?: string | null,
      recipient?: string | null,
      walletId?: null
    ): WalletSharedEventFilter;
    WalletShared(
      sharer?: string | null,
      recipient?: string | null,
      walletId?: null
    ): WalletSharedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPORTED_AGENT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURY_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    blockList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelDelete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeInteractHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeSendEthersHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmDelete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAgent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createWallet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAgentNonce(
      agentAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgents(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _instanceId: BytesLike,
      treasuryAddress: string,
      minStakes: BigNumberish,
      maxStakes: BigNumberish,
      minPoolShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateProxyTransaction(
      locator: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instanceId(overrides?: CallOverrides): Promise<BigNumber>;

    interact(
      agentAddress: string,
      contractAddress: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interactAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDeleting(overrides?: CallOverrides): Promise<BigNumber>;

    maxStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minPoolSharePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendEther(
      agentAddress: string,
      recipientAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendEtherAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxStakeAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinStakeAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareWallet(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeEthers(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStakes(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKING_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPPORTED_AGENT_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURY_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelDelete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeInteractHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeSendEthersHash(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmDelete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAgent(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createWallet(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteWallet(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAgentNonce(
      agentAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _instanceId: BytesLike,
      treasuryAddress: string,
      minStakes: BigNumberish,
      maxStakes: BigNumberish,
      minPoolShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateProxyTransaction(
      locator: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instanceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interact(
      agentAddress: string,
      contractAddress: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interactAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDeleting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPoolSharePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendEther(
      agentAddress: string,
      recipientAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendEtherAsProxy(
      input: ProxiableWalletManagerUpgradeable.ProxyTransactionInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStakeAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinStakeAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareWallet(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeEthers(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStakes(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
